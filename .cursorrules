You are building an ML Vision focused App that takes a Camera input and computes a DINO embedding. 
This embedding is used to do KNN based scene recognition. Based on the general scene recognised additional ML Programs will be run,
such as Open OCR.

# Important rules you HAVE TO FOLLOW

- Always add debug logs & comments in the code for easier debug & readability.
- Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.
- By default new SwiftUI components should be added to the RecordLib library.
- By default new Views and ViewModels should be added to the RecordLib library.
- By default new Models should be added to the RecordLib library.
- By default new Services should be added to the RecordLib library.
- For components that react to events or external @State variables, a toolbar should be added to the preview that allows triggering changes and events.


# Project structure

Generated with tree -L 3

.
├── apps/
│   ├── README.md
│   ├── RecordThing/
│   │   └── Shared/
│   │       └── Evidence/
│   │           ├── ThingsView.swift
│   │           ├── ThingsHeaderView.swift
│   │           ├── RequestsView.swift
│   │           └── RequestsHeaderView.swift
│   └── libs/
│       └── RecordLib/
│           ├── Package.swift
│           ├── Sources/
│           │   └── RecordLib/
│           │       └── ... (library source files)
│           └── Tests/
│               └── RecordLibTests/
│                   └── ... (test files)
├── libs/
│   └── record_thing/
│       ├── db/
│       │   ├── evidence.sql
│       │   ├── categories.sql
│       │   ├── test_data.py
│       │   └── product_types.yaml
│       ├── taxonomy/
│       │   ├── google_product.py
│       │   └── category.py
│       ├── db_setup.py
│       └── record-thing.sqlite
└── docs/
    └── DATABASE.md

# Tech Stack

- SwiftUI
- Swift
- Blackbird
- SQLite with Vector Extensions
- DINO v2
- KNN
- Open OCR
- Vision
- CoreML
- CoreMLTools
- CoreMLData
- CoreMLDataTools

# Code Policies

## Logging in Swift View Components

> let logger = Logger(subsystem: "com.record-thing", category: "ui")

1. Privacy First: Despite the ease of logging, always ensure you're not capturing sensitive or personal user input.

2. Subsystems and Categories: Segment your logs using different subsystems (e.g., data, UI, network) and categories for better organization.

3. Consistent Naming: Adopt a uniform naming convention for your loggers, making it easier to filter and analyze logs.

4. Adaptive Logging: Use different log levels depending on the build (e.g., more verbose logging in debug builds and minimal in-release builds).

5. Incorporate Metadata: Logger supports metadata, allowing you to add supplementary context to your logs, enriching them for better diagnostics.


## Platforms

The app will be supporting both iOS and macOS.
