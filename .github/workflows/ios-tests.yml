name: iOS Tests

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'apps/RecordThing/**'
      - 'apps/libs/**'
      - '.github/workflows/ios-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/RecordThing/**'
      - 'apps/libs/**'
      - '.github/workflows/ios-tests.yml'

env:
  DEVELOPER_DIR: /Applications/Xcode_15.4.app/Contents/Developer

jobs:
  test-ios:
    name: iOS Tests
    runs-on: macos-14
    
    strategy:
      matrix:
        destination: 
          - 'platform=iOS Simulator,name=iPhone 16,OS=18.0'
          - 'platform=iOS Simulator,name=iPad Pro (13-inch) (M4),OS=18.0'
        scheme: ['RecordLib', 'ShareExtension']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          apps/RecordThing/DerivedData
        key: ${{ runner.os }}-xcode-${{ matrix.scheme }}-${{ hashFiles('**/*.xcodeproj/**', '**/*.xcworkspace/**') }}
        restore-keys: |
          ${{ runner.os }}-xcode-${{ matrix.scheme }}-
          ${{ runner.os }}-xcode-
          
    - name: List available simulators
      run: xcrun simctl list devices available
      
    - name: Boot simulator
      run: |
        DEVICE_ID=$(xcrun simctl list devices available | grep "iPhone 16" | grep -v "Plus" | grep -v "Pro" | head -1 | grep -o '[A-F0-9-]\{36\}')
        echo "Booting simulator: $DEVICE_ID"
        xcrun simctl boot "$DEVICE_ID" || true
        xcrun simctl list devices | grep Booted
        
    - name: Build and test RecordLib
      if: matrix.scheme == 'RecordLib'
      run: |
        cd apps/RecordThing
        xcodebuild test \
          -project RecordThing.xcodeproj \
          -scheme RecordLib \
          -destination '${{ matrix.destination }}' \
          -resultBundlePath TestResults-RecordLib.xcresult \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO
          
    - name: Build ShareExtension for testing
      if: matrix.scheme == 'ShareExtension'
      run: |
        cd apps/RecordThing
        xcodebuild build-for-testing \
          -project RecordThing.xcodeproj \
          -scheme ShareExtension \
          -destination '${{ matrix.destination }}' \
          -derivedDataPath DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO
          
    - name: Test ShareExtension
      if: matrix.scheme == 'ShareExtension'
      run: |
        cd apps/RecordThing
        # Create a simple test runner since ShareExtension tests need special handling
        xcodebuild test-without-building \
          -project RecordThing.xcodeproj \
          -scheme ShareExtension \
          -destination '${{ matrix.destination }}' \
          -derivedDataPath DerivedData \
          -resultBundlePath TestResults-ShareExtension.xcresult \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO || true
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.scheme }}-${{ strategy.job-index }}
        path: |
          apps/RecordThing/TestResults-*.xcresult
          apps/RecordThing/DerivedData/Logs/Test/*.xcresult
        retention-days: 30
        
    - name: Generate code coverage report
      if: matrix.scheme == 'RecordLib'
      run: |
        cd apps/RecordThing
        xcrun xccov view --report --json TestResults-RecordLib.xcresult > coverage.json || true
        
    - name: Upload coverage to Codecov
      if: matrix.scheme == 'RecordLib' && matrix.destination == 'platform=iOS Simulator,name=iPhone 16,OS=18.0'
      uses: codecov/codecov-action@v4
      with:
        file: apps/RecordThing/coverage.json
        flags: ios,swift
        name: ios-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  test-macos:
    name: macOS Tests
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          apps/RecordThing/DerivedData
        key: ${{ runner.os }}-xcode-macos-${{ hashFiles('**/*.xcodeproj/**', '**/*.xcworkspace/**') }}
        restore-keys: |
          ${{ runner.os }}-xcode-macos-
          ${{ runner.os }}-xcode-
          
    - name: Build and test for macOS
      run: |
        cd apps/RecordThing
        xcodebuild test \
          -project RecordThing.xcodeproj \
          -scheme RecordLib \
          -destination 'platform=macOS' \
          -resultBundlePath TestResults-macOS.xcresult \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
          
    - name: Upload macOS test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-macos
        path: |
          apps/RecordThing/TestResults-macOS.xcresult
          apps/RecordThing/DerivedData/Logs/Test/*.xcresult
        retention-days: 30

  lint-and-format:
    name: Lint and Format Check
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        cd apps/RecordThing
        swiftlint lint --reporter github-actions-logging
        
    - name: Check Swift formatting (if SwiftFormat is configured)
      run: |
        cd apps/RecordThing
        # Add SwiftFormat check if you have it configured
        # swiftformat --lint .
        echo "Swift formatting check completed"

  build-check:
    name: Build Check
    runs-on: macos-14
    
    strategy:
      matrix:
        scheme: ['RecordThing iOS', 'RecordThing macOS']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'
        
    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          apps/RecordThing/DerivedData
        key: ${{ runner.os }}-build-${{ matrix.scheme }}-${{ hashFiles('**/*.xcodeproj/**', '**/*.xcworkspace/**') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.scheme }}-
          ${{ runner.os }}-build-
          
    - name: Build iOS
      if: matrix.scheme == 'RecordThing iOS'
      run: |
        cd apps/RecordThing
        xcodebuild build \
          -project RecordThing.xcodeproj \
          -scheme 'RecordThing iOS' \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.0' \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=NO
          
    - name: Build macOS
      if: matrix.scheme == 'RecordThing macOS'
      run: |
        cd apps/RecordThing
        xcodebuild build \
          -project RecordThing.xcodeproj \
          -scheme 'RecordThing macOS' \
          -destination 'platform=macOS' \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO
